plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
    id "org.jetbrains.kotlin.kapt" version "1.3.61"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.61"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
}

version "0.1-SNAPSHOT"
group "org.sgdan"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    developmentOnly
}

dependencies {
    // from example https://github.com/micronaut-projects/micronaut-examples/blob/master/hello-world-kotlin/build.gradle
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    //implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "io.micronaut:micronaut-runtime"
    //implementation "io.swagger.core.v3:swagger-annotations"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kapt "io.micronaut.configuration:micronaut-openapi"
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.10.2"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    //testImplementation "org.mockito:mockito-junit-jupiter:3.2.4"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    //testRuntimeOnly "org.jetbrains.spek:spek-junit-platform-engine:1.1.5"

    // specific to this project
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'
    implementation "io.github.microutils:kotlin-logging:1.7.8"
    implementation "software.amazon.awssdk:ec2:$sdkVersion"
    implementation "software.amazon.awssdk:autoscaling:$sdkVersion"
    implementation "software.amazon.awssdk:rds:$sdkVersion"
    implementation "software.amazon.awssdk:docdb:$sdkVersion"
    implementation "software.amazon.awssdk:ssm:$sdkVersion"
    implementation "software.amazon.awssdk:databasemigration:$sdkVersion"

    // required if using WebIdentityTokenFileCredentialsProvider
    // e.g. running as k8s pod in EKS linked to IAM role via service account
    implementation "software.amazon.awssdk:sts:$sdkVersion"
}

test.classpath += configurations.developmentOnly

mainClassName = "org.sgdan.scheduler.Application"

test {
    useJUnitPlatform()
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
        freeCompilerArgs += [
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi"]
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
